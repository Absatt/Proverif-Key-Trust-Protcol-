set attacker = active.
set ignoreTypes = false. (* false for faster run time *)
set reconstructTrace = true. (* assemble an attack if possible *)
set traceBacktracking = true.
set abbreviateDerivation = true.
(* set simplifyProcess = true.
set rejectChoiceTrueFalse = false.
set rejectNoSimplif = false.
set maxDepth = none.
set maxHyp = none.
set expandSimplifyIfCst = true.
set traceDisplay = long. *)

type principal.

const pub:channel.
const chan_Alice_to_Bob:channel.
const chan_Alice_to_Bob_private:channel [private].
const chan_Bob_to_Alice:channel.
const chan_Bob_to_Alice_private:channel [private].
event SendMsg(principal, principal, bitstring).
event RecvMsg(principal, principal, bitstring).
event failed().
event done().
event AliceDone().
event BobDone().

const principal_Alice:principal.
const principal_Bob:principal.
const empty:bitstring [data].
const const_nil:bitstring.
const const_g:bitstring.

const const_whispertext:bitstring.
const const_whisperratchet:bitstring.
const const_whispermessagekeys:bitstring.
const const_message_key_seed:bitstring.
const const_alongterm:bitstring [private].
const const_bob_name:bitstring [private].
const const_ad:bitstring [private].
const const_blongterm:bitstring [private].
const const_bs:bitstring [private].
free const_bo:bitstring [private].
free const_ae0:bitstring [private].
free const_ak1:bitstring [private].
free const_ae1:bitstring [private].
free const_be1:bitstring [private].
free const_bk2:bitstring [private].
free const_ae2:bitstring [private].

const const_galongterm:bitstring [private].
const const_gblongterm:bitstring [private].
const const_gbs:bitstring [private].
const const_gbo:bitstring [private].
const const_gbssig:bitstring [private].
const const_gae0:bitstring [private].
const const_gae1:bitstring [private].
const const_e1:bitstring [private].
const const_gbe1:bitstring [private].
const const_e2:bitstring [private].
const const_gae2:bitstring [private].
const const_e3:bitstring [private].

fun shamir_keys_pack(bitstring, bitstring, bitstring):bitstring [data].
reduc forall a:bitstring, b:bitstring, c:bitstring;
	shamir_keys_unpack(shamir_keys_pack(a, b, c)) = (a, b, c).
letfun ASSERT(a:bitstring, b:bitstring) = a = b.
fun CONCAT2(bitstring, bitstring):bitstring [data].
fun CONCAT3(bitstring, bitstring, bitstring):bitstring [data].
fun CONCAT4(bitstring, bitstring, bitstring, bitstring):bitstring [data].
fun CONCAT5(bitstring, bitstring, bitstring, bitstring, bitstring):bitstring [data].
fun SPLIT(bitstring):bitstring 
    reduc forall a:bitstring, b:bitstring;
	SPLIT(CONCAT2(a, b)) = (a, b)
    otherwise forall a:bitstring, b:bitstring, c:bitstring;
	SPLIT(CONCAT3(a, b, c)) = (a, b, c)
	otherwise forall a:bitstring, b:bitstring, c:bitstring, d:bitstring;
	SPLIT(CONCAT4(a, b, c, d)) = (a, b, c, d)
	otherwise forall a:bitstring, b:bitstring, c:bitstring, d:bitstring, e:bitstring;
	SPLIT(CONCAT5(a, b, c, d, e)) = (a, b, c, d, e).
fun exp(bitstring, bitstring):bitstring.
equation forall a:bitstring, b:bitstring;
	exp(b, exp(a, const_g)) = exp(a, exp(b, const_g)).
fun HASH1(bitstring):bitstring.
fun HASH2(bitstring, bitstring):bitstring.
fun HASH3(bitstring, bitstring, bitstring):bitstring.
fun HASH4(bitstring, bitstring, bitstring, bitstring):bitstring.
fun HASH5(bitstring, bitstring, bitstring, bitstring, bitstring):bitstring.
fun MAC(bitstring, bitstring): bitstring.
fun hmac_hash1(bitstring, bitstring, bitstring):bitstring.
fun hmac_hash2(bitstring, bitstring, bitstring):bitstring.
fun hmac_hash3(bitstring, bitstring, bitstring):bitstring.
letfun HKDF(salt:bitstring, ikm:bitstring, info:bitstring) =
	let output1 = hmac_hash1(salt, ikm, info) in
	let output2 = hmac_hash2(salt, ikm, info) in
	(output1, output2).
fun PW_HASH(bitstring): bitstring.
fun ENC(bitstring, bitstring):bitstring.
fun DEC(bitstring, bitstring):bitstring
    reduc forall k:bitstring, m:bitstring;
	DEC(k, ENC(k, m)) = m
	otherwise forall k:bitstring, m:bitstring;
	DEC(k, m) = empty.
fun AEAD_ENC(bitstring, bitstring, bitstring):bitstring.
fun AEAD_DEC(bitstring, bitstring, bitstring):bitstring
    reduc forall k:bitstring, m:bitstring, ad:bitstring;
	AEAD_DEC(k, AEAD_ENC(k, m, ad), ad) = m
	otherwise forall k:bitstring, m:bitstring, ad:bitstring;
	AEAD_DEC(k, m, ad) = empty.
fun AEAD_DEC_check(bitstring, bitstring, bitstring):bool
    reduc forall k:bitstring, m:bitstring, ad:bitstring;
	AEAD_DEC_check(k, AEAD_ENC(k, m, ad), ad) = true
	otherwise forall k:bitstring, m:bitstring, ad:bitstring;
	AEAD_DEC_check(k, m, ad) = false.
fun PKE_ENC(bitstring, bitstring):bitstring.
fun PKE_DEC(bitstring, bitstring):bitstring
    reduc forall k:bitstring, m:bitstring;
	PKE_DEC(k, PKE_ENC(exp(k, const_g), m)) = m.
fun SIGN(bitstring, bitstring):bitstring.
fun SIGNVERIF(bitstring, bitstring, bitstring):bool
    reduc forall sk:bitstring, m:bitstring;
	SIGNVERIF(exp(sk, const_g), SIGN(sk, m), m) = true
	otherwise forall pk:bitstring, s:bitstring, m:bitstring;
	SIGNVERIF(pk, s, m) = false.
fun RINGSIGN(bitstring, bitstring, bitstring, bitstring):bitstring.
fun shamir_split1(bitstring):bitstring.
fun shamir_split2(bitstring):bitstring.
fun shamir_split3(bitstring):bitstring.
letfun SHAMIR_SPLIT(k:bitstring) =
	let k1 = shamir_split1(k) in
	let k2 = shamir_split2(k) in
	let k3 = shamir_split3(k) in
	(k1, k2, k3).
fun SHAMIR_JOIN(bitstring, bitstring):bitstring
    reduc forall k:bitstring;
	SHAMIR_JOIN(shamir_split1(k), shamir_split2(k)) = k
	otherwise forall k:bitstring;
	SHAMIR_JOIN(shamir_split2(k), shamir_split1(k)) = k
	otherwise forall k:bitstring;
	SHAMIR_JOIN(shamir_split1(k), shamir_split3(k)) = k
	otherwise forall k:bitstring;
	SHAMIR_JOIN(shamir_split3(k), shamir_split1(k)) = k
	otherwise forall k:bitstring;
	SHAMIR_JOIN(shamir_split2(k), shamir_split3(k)) = k
	otherwise forall k:bitstring;
	SHAMIR_JOIN(shamir_split3(k), shamir_split2(k)) = k.
fun BLIND(bitstring, bitstring):bitstring.
fun UNBLIND(bitstring, bitstring, bitstring):bitstring
    reduc forall k:bitstring, m:bitstring, a:bitstring;
	UNBLIND(k, m, SIGN(a, BLIND(k, m))) = SIGN(a, m)
	otherwise forall k:bitstring, m:bitstring, a:bitstring;
	UNBLIND(k, m, a) = const_nil.

(* query event(AliceDone()). *)
(* query event(BobDone()). *)
(* query attacker(const_bob_name). *)
(* query attacker(const_ak1). *)
(* query event(RecvMsg(principal_Bob, principal_Alice, const_gbssig)) ==> event(SendMsg(principal_Bob, principal_Alice, const_gbssig)). *)
(* query event(RecvMsg(principal_Bob, principal_Alice, const_gbs)) ==> event(SendMsg(principal_Bob, principal_Alice, const_gbs)). *)
(* query event(RecvMsg(principal_Alice, principal_Bob, const_gae0)) ==> event(SendMsg(principal_Alice, principal_Bob, const_gae0)). *)
(* query event(RecvMsg(principal_Alice, principal_Bob, const_gae1)) ==> event(SendMsg(principal_Alice, principal_Bob, const_gae1)). *)
(* query event(RecvMsg(principal_Alice, principal_Bob, const_e1)) ==> event(SendMsg(principal_Alice, principal_Bob, const_e1)). *)
(* query attacker(const_bk2). *)
(* query event(RecvMsg(principal_Bob, principal_Alice, const_gbe1)) ==> event(SendMsg(principal_Bob, principal_Alice, const_gbe1)). *)
(* query event(RecvMsg(principal_Bob, principal_Alice, const_e2)) ==> event(SendMsg(principal_Bob, principal_Alice, const_e2)). *)
(* query event(RecvMsg(principal_Alice, principal_Bob, const_gae2)) ==> event(SendMsg(principal_Alice, principal_Bob, const_gae2)). *)
(* query event(RecvMsg(principal_Alice, principal_Bob, const_e3)) ==> event(SendMsg(principal_Alice, principal_Bob, const_e3)). *)

let leak(x1:bitstring, x2:bitstring, x3:bitstring, x4:bitstring, x5:bitstring) = 
	out(pub, const_alongterm);
	out(pub, const_ad);
	out(pub, const_ae2);
	out(pub, x1);
	out(pub, x2);
	out(pub, x3);
	out(pub, x4);
	out(pub, x5);
    0.

let Alice() =
	let (Alice_galongterm:bitstring) = exp(const_alongterm, const_g) in event done();
	out(pub, Alice_galongterm);
	out(chan_Alice_to_Bob_private, (Alice_galongterm));
	in(chan_Bob_to_Alice_private, (Bob_gblongterm:bitstring));
	in(chan_Bob_to_Alice, (Bob_gbssig:bitstring));
	in(chan_Bob_to_Alice, (Bob_gbs:bitstring));
	in(chan_Bob_to_Alice, (Bob_gbo:bitstring));
	if (SIGNVERIF(Bob_gblongterm, Bob_gbssig, Bob_gbs) = true) then (
		(* event RecvMsg(principal_Bob, principal_Alice, const_gbssig);/ *)
		(* event RecvMsg(principal_Bob, principal_Alice, const_gbs); *)
		let (Alice_gae0:bitstring) = exp(const_ae0, const_g) in event done();
		let (Alice_gae1:bitstring) = exp(const_ae1, const_g) in event done();
		let (Alice_a3xdh:bitstring) = CONCAT4(exp(const_alongterm, Bob_gbs), exp(const_ae0, Bob_gblongterm), exp(const_ae0, Bob_gbs), exp(const_ae0, Bob_gbo)) in event done();
		let (Alice_aroot0:bitstring, Alice_achain0:bitstring) = HKDF(const_nil, Alice_a3xdh, const_whispertext) in event done();
		let (Alice_ashared1:bitstring) = exp(const_ae1, Bob_gbs) in event done();
		let (Alice_aroot1:bitstring, Alice_achain1:bitstring) = HKDF(Alice_aroot0, Alice_ashared1, const_whisperratchet) in event done();
		let (Alice_akenc1:bitstring, Alice_akenc2:bitstring) = HKDF(const_nil, MAC(Alice_achain1, const_message_key_seed), const_whispermessagekeys) in event done();
		let (Alice_e1:bitstring) = AEAD_ENC(Alice_akenc1, const_ak1, CONCAT2(Alice_galongterm, Bob_gblongterm)) in event done();
		let (Alice_bob_name_enc1:bitstring) = AEAD_ENC(const_ak1, const_bob_name, const_ad) in event done();
		(* event SendMsg(principal_Alice, principal_Bob, const_gae0); *)
		out(chan_Alice_to_Bob, (Alice_gae0));
		(* event SendMsg(principal_Alice, principal_Bob, const_gae1); *)
		out(chan_Alice_to_Bob, (Alice_gae1));
		event SendMsg(principal_Alice, principal_Bob, const_e1);
		out(chan_Alice_to_Bob, (Alice_e1));
		in(chan_Bob_to_Alice, (Bob_gbe1:bitstring));
		in(chan_Bob_to_Alice, (Bob_e2:bitstring));
		let (Alice_ashared2:bitstring) = exp(const_ae1, Bob_gbe1) in event done();
		let (Alice_aroot2:bitstring, Alice_achain2:bitstring) = HKDF(Alice_aroot1, Alice_ashared2, const_whisperratchet) in event done();
		let (Alice_akenc3:bitstring, Alice_akenc4:bitstring) = HKDF(const_nil, MAC(Alice_achain2, const_message_key_seed), const_whispermessagekeys) in event done();
		if (AEAD_DEC_check(Alice_akenc3, Bob_e2, CONCAT2(Alice_galongterm, Bob_gblongterm)) = true) then (
			(* event RecvMsg(principal_Bob, principal_Alice, const_gbe1); *)
			event RecvMsg(principal_Bob, principal_Alice, const_e2);
			let (Alice_bundle_d:bitstring) = AEAD_DEC(Alice_akenc3, Bob_e2, CONCAT2(Alice_galongterm, Bob_gblongterm)) in event done();
			let (Alice_ak1_d:bitstring, Alice_ak2:bitstring) = SPLIT(Alice_bundle_d) in event done();
			if (AEAD_DEC_check(Alice_ak1_d, Alice_bob_name_enc1, const_ad) = true) then (
				let (Alice_bob_name_dec1:bitstring) = AEAD_DEC(Alice_ak1_d, Alice_bob_name_enc1, const_ad) in event done();
				let (Alice_bob_name_enc2:bitstring) = AEAD_ENC(Alice_ak2, Alice_bob_name_dec1, const_ad) in event done();
				let (Alice_gae2:bitstring) = exp(const_ae2, const_g) in event done();
				let (Alice_ashared3:bitstring) = exp(const_ae2, Bob_gbe1) in event done();
				let (Alice_aroot3:bitstring, Alice_achain3:bitstring) = HKDF(Alice_aroot2, Alice_ashared3, const_whisperratchet) in event done();
				let (Alice_akenc5:bitstring, Alice_akenc6:bitstring) = HKDF(const_nil, MAC(Alice_achain3, const_message_key_seed), const_whispermessagekeys) in event done();
				let (Alice_e3:bitstring) = AEAD_ENC(Alice_akenc5, Alice_ak2, CONCAT2(Alice_galongterm, Bob_gblongterm)) in event done();
				event AliceDone();
				(* event SendMsg(principal_Alice, principal_Bob, const_gae2); *)
				out(chan_Alice_to_Bob, (Alice_gae2));
				event SendMsg(principal_Alice, principal_Bob, const_e3);
				out(chan_Alice_to_Bob, (Alice_e3));
				leak(Alice_akenc2, Alice_akenc4, Alice_akenc6, Alice_aroot3, Alice_bob_name_enc2)
			)
			else event failed()
		)
		else event failed()
	)
	else event failed();
	0.
let Bob() =
	let (Bob_gblongterm:bitstring) = exp(const_blongterm, const_g) in event done();
	out(pub, Bob_gblongterm);
	out(chan_Bob_to_Alice_private, (Bob_gblongterm));
	let (Bob_gbo:bitstring) = exp(const_bo, const_g) in event done();
	let (Bob_gbs:bitstring) = exp(const_bs, const_g) in event done();
	let (Bob_gbssig:bitstring) = SIGN(const_blongterm, Bob_gbs) in event done();
	out(chan_Bob_to_Alice, (Bob_gbo));
	(* event SendMsg(principal_Bob, principal_Alice, const_gbs); *)
	out(chan_Bob_to_Alice, (Bob_gbs));
	(* event SendMsg(principal_Bob, principal_Alice, const_gbssig); *)
	out(chan_Bob_to_Alice, (Bob_gbssig));
	in(chan_Alice_to_Bob_private, (Alice_galongterm:bitstring));
	in(chan_Alice_to_Bob, (Alice_gae0:bitstring));
	in(chan_Alice_to_Bob, (Alice_gae1:bitstring));
	in(chan_Alice_to_Bob, (Alice_e1:bitstring));
	let (Bob_b3xdh:bitstring) = CONCAT4(exp(const_bs, Alice_galongterm), exp(const_blongterm, Alice_gae0), exp(const_bs, Alice_gae0), exp(const_bo, Alice_gae0)) in event done();
	let (Bob_broot0:bitstring, Bob_bchain0:bitstring) = HKDF(const_nil, Bob_b3xdh, const_whispertext) in event done();
	let (Bob_bshared1:bitstring) = exp(const_bs, Alice_gae1) in event done();
	let (Bob_broot1:bitstring, Bob_bchain1:bitstring) = HKDF(Bob_broot0, Bob_bshared1, const_whisperratchet) in event done();
	let (Bob_bkenc1:bitstring, Bob_bkenc2:bitstring) = HKDF(const_nil, MAC(Bob_bchain1, const_message_key_seed), const_whispermessagekeys) in event done();
	if (AEAD_DEC_check(Bob_bkenc1, Alice_e1, CONCAT2(Alice_galongterm, Bob_gblongterm)) = true) then (
		(* event RecvMsg(principal_Alice, principal_Bob, const_gae0); *)
		(* event RecvMsg(principal_Alice, principal_Bob, const_gae1); *)
		event RecvMsg(principal_Alice, principal_Bob, const_e1);
		let (Bob_bk1:bitstring) = AEAD_DEC(Bob_bkenc1, Alice_e1, CONCAT2(Alice_galongterm, Bob_gblongterm)) in event done();
		let (Bob_gbe1:bitstring) = exp(const_be1, const_g) in event done();
		let (Bob_bshared2:bitstring) = exp(const_be1, Alice_gae1) in event done();
		let (Bob_broot2:bitstring, Bob_bchain2:bitstring) = HKDF(Bob_broot1, Bob_bshared2, const_whisperratchet) in event done();
		let (Bob_bkenc3:bitstring, Bob_bkenc4:bitstring) = HKDF(const_nil, MAC(Bob_bchain2, const_message_key_seed), const_whispermessagekeys) in event done();
		let (Bob_bundle:bitstring) = CONCAT2(Bob_bk1, const_bk2) in event done();
		let (Bob_e2:bitstring) = AEAD_ENC(Bob_bkenc3, Bob_bundle, CONCAT2(Alice_galongterm, Bob_gblongterm)) in event done();
		(* event SendMsg(principal_Bob, principal_Alice, const_gbe1); *)
		out(chan_Bob_to_Alice, (Bob_gbe1));
		event SendMsg(principal_Bob, principal_Alice, const_e2);
		out(chan_Bob_to_Alice, (Bob_e2));
		in(chan_Alice_to_Bob, (Alice_gae2:bitstring));
		in(chan_Alice_to_Bob, (Alice_e3:bitstring));
		let (Bob_bshared3:bitstring) = exp(const_be1, Alice_gae2) in event done();
		let (Bob_broot3:bitstring, Bob_bchain3:bitstring) = HKDF(Bob_broot2, Bob_bshared3, const_whisperratchet) in event done();
		let (Bob_bkenc5:bitstring, Bob_bkenc6:bitstring) = HKDF(const_nil, MAC(Bob_bchain3, const_message_key_seed), const_whispermessagekeys) in event done();
		if (AEAD_DEC_check(Bob_bkenc5, Alice_e3, CONCAT2(Alice_galongterm, Bob_gblongterm)) = true) then (
			event BobDone();
			(* event RecvMsg(principal_Alice, principal_Bob, const_gae2); *)
			event RecvMsg(principal_Alice, principal_Bob, const_e3);
			let (Bob_bk2_d:bitstring) = AEAD_DEC(Bob_bkenc5, Alice_e3, CONCAT2(Alice_galongterm, Bob_gblongterm)) in event done()
		)
		else event failed()
	)
	else event failed();
	0.
process 
	((!Alice()) | (!Bob()))